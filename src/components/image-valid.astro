<div class="hidden px-4" id="comp-resume">
    <input type="file" id="fileInput" accept="image/*" />
    <br />
    <textarea id="base64Output" class="hidden" rows="10" cols="60" readonly
    ></textarea>
    <br />
    <img id="preview" class="hidden" alt="Preview Image" />

    <button
        id="btn-face"
        class="py-2 px-4 bg-orange-700 text-orange-50 rounded-md hover:opacity-85 hidden"
        >kirim</button
    >
</div>
<script>
    import { getCookie, setCookie } from "../lib/storage";
    import { serviceFaceverification, servicePresensi } from "../services/bkn";
    import Swal from "sweetalert2";

    const fileInput = document.getElementById("fileInput") as HTMLInputElement;
    const preview = document.getElementById("preview") as HTMLImageElement;
    const comp = document.getElementById("comp-resume") as HTMLDivElement;

    const base64Output = document.getElementById(
        "base64Output",
    ) as HTMLTextAreaElement;
    const btnFace = document.getElementById("btn-face") as HTMLButtonElement;

    const main = async () => {
        const check = getCookie("isVerif");
        if (!check) {
            comp.classList.remove("hidden");
        }
    };


    fileInput.addEventListener("change", (event: any) => {
        const file = event?.target?.files[0];
        if (!file) return;

        const reader = new FileReader();

        reader.onload = function (e) {
            const img = new Image();
            img.onload = function () {
                const canvas = document.createElement("canvas");
                const targetWidth = 450;
                const targetHeight = 600;

                canvas.width = targetWidth;
                canvas.height = targetHeight;

                const ctx = canvas.getContext("2d");

                // Hitung rasio crop
                const aspectTarget = targetWidth / targetHeight;
                const aspectImage = img.width / img.height;

                let cropWidth, cropHeight, cropX, cropY;

                if (aspectImage > aspectTarget) {
                    // Gambar lebih lebar → crop sisi kiri dan kanan
                    cropHeight = img.height;
                    cropWidth = cropHeight * aspectTarget;
                    cropX = (img.width - cropWidth) / 2;
                    cropY = 0;
                } else {
                    // Gambar lebih tinggi → crop atas dan bawah
                    cropWidth = img.width;
                    cropHeight = cropWidth / aspectTarget;
                    cropX = 0;
                    cropY = (img.height - cropHeight) / 2;
                }

                // Gambar hasil crop ke canvas
                ctx?.drawImage(
                    img,
                    cropX,
                    cropY,
                    cropWidth,
                    cropHeight, // area dari gambar asli
                    0,
                    0,
                    targetWidth,
                    targetHeight, // area ke canvas
                );

                const dataURL = canvas.toDataURL("image/jpeg", 0.8);

                preview.src = dataURL;
                preview.width = targetWidth;
                preview.height = targetHeight;

                // ambil base64 pure
                const base64 = dataURL.split(",")[1];
                base64Output.value = "data:image/jpeg;base64," + base64;
            };
            img.src = e?.target?.result?.toString() ?? "";
        };

        reader.readAsDataURL(file);

        btnFace.classList.remove("hidden");
        preview.classList.remove("hidden");
    });

    btnFace.addEventListener("click", async () => {
        if (base64Output.value == "") {
            alert("kosong");
            return;
        }

        Swal.fire({
            title: "Memproses...",
            text: "Mohon tunggu sebentar",
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            },
        });

        try {
            const face = await serviceFaceverification(base64Output.value);

            // Tutup loading
            Swal.close();

            if (!face.status) {
                Swal.fire({
                    title: "Gagal",
                    text: face.message || "Verifikasi wajah gagal",
                    icon: "error",
                });
            } else {
                setCookie("isVerif", "true", 5 * 60);
                Swal.fire({
                    title: "Berhasil",
                    text: "Berhasil Verifikasi", 
                    icon: "success",
                });
                setTimeout(() => {
                    window.location.reload()
                }, 1500)
            }
        } catch (error) {

            Swal.close();
            Swal.fire({
                title: "Terjadi Kesalahan",
                text: "Gagal memproses verifikasi wajah",
                icon: "error",
            });
            console.error(error);
        }
        
    });

    main();
</script>
